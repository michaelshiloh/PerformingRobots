/*

  Large animation (although not full screen), classy method, now with frames in an array!

*/

#include <Arduino.h>
#include <stdint.h>
#include "Wire.h" // for QWIIC communication

// Button
#include <SparkFun_Qwiic_Button.h>
QwiicButton button;

// Motor controller
#include "SCMD.h"
#include "SCMD_config.h" //Contains #defines for common SCMD register names and values
SCMD myMotorDriver; //This creates the main object of one motor driver and connected slaves.
#define LEFT_MOTOR 0
#define RIGHT_MOTOR 1

// OLED
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


void stopMotors() {
  myMotorDriver.setDrive( LEFT_MOTOR, 0, 0); //Stop motor
  myMotorDriver.setDrive( RIGHT_MOTOR, 0, 0); //Stop motor
}

void leftForward(int speed) {
  myMotorDriver.setDrive( LEFT_MOTOR, 0, speed);
}

void rightForward(int speed) {
  myMotorDriver.setDrive( RIGHT_MOTOR, 0, speed);
}

/*
   Wiggle class
   Methods include:
   - .init(repetitions, duration, innerSpeed, outerSpeed)
   - .update()
   - .inProgress()
*/

class Wiggler {
    // Class variables
    unsigned long startedThisWiggleAt = 0;
    unsigned long desiredWiggleDuration;
    int desiredWiggleRepetitions;
    int state = 0;
    unsigned long now;
    int desiredInnerSpeed ;
    int desiredOuterSpeed ;

    /*
       Wiggle states:

       0 - just created; next state: 0
       1 - start a left wiggle; next state: 2
       2 - next state: 3, if time expired
       3 - start a right wiggle; next state: 4
       4 - next state: 5, if time expired
       5 - decrement repetitions; next state: if repetitions == 0, state 6 otherwise: state 1
       6 - turn motors off; next state: 0
    */

  public:

    Wiggler() { // nothing to do in constructor
      state = 0;
    }

    void init( int _repetitions, int _duration,  int _innerSpeed, int _outerSpeed ) {
      desiredWiggleRepetitions = _repetitions;
      desiredWiggleDuration = _duration;
      desiredInnerSpeed = _innerSpeed;
      desiredOuterSpeed = _outerSpeed;
      state = 1;
    }

    void update() {

      // for debugging
      //      Serial.print("state = ");
      //      Serial.print(state);
      //      Serial.print("\t time = ");
      //      Serial.print(millis());
      //      Serial.print("\t repetitions = ");
      //      Serial.print(desiredWiggleRepetitions);
      //      Serial.println();

      switch (state) {
        case 0:
          state = 0;
          break;
        case 1:
          wiggleLeft();
          startedThisWiggleAt = millis();
          state = 2;
          break;
        case 2:
          now = millis();
          if ((now - startedThisWiggleAt) >= desiredWiggleDuration) {
            state = 3;
          }
          break;
        case 3:
          wiggleRight();
          startedThisWiggleAt = millis();
          state = 4;
          break;
        case 4:
          now = millis();
          if ((now - startedThisWiggleAt) >= desiredWiggleDuration) {
            state = 5;
          }
          break;
        case 5:
          desiredWiggleRepetitions--;
          if (desiredWiggleRepetitions) {
            state = 1; // do another wiggle
          } else {
            state = 6; // we're done
          }
          break;
        case 6:
          stopMotors();
          state = 0;
          break;
      }
    }

    boolean inProgress() {
      if (state == 0)
        return  false;
      else
        return true;
    }

  private:
    void wiggleRight() {
      leftForward(desiredOuterSpeed);
      rightForward(desiredInnerSpeed);
    }
    void wiggleLeft() {
      leftForward(desiredInnerSpeed);
      rightForward(desiredOuterSpeed);
    }
};

Wiggler myWiggler;


static const unsigned char PROGMEM positions[][288] =
{{
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
  },
  {
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
  },
  {
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
  },
  {
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
  },
  {
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
  }
};


class Animator {
    // Class variables
    unsigned long frameDuration;
    unsigned long startedThisFrameAt = 0;
    unsigned long animationDuration;
    unsigned long startedAnimationAt = 0;
    int state = 0;
    unsigned long now;
    boolean screenClearNeeded = true;
    int frameIndex = 0;
    boolean isPlaying = false;

    /*
       Animation states

       0 - Just created; clear screen; next state: 0. .start() causes state 1
       1 - frameIndex = 0, animationDuration = millis(); next state: 2
       2 - display this frame; next state: 3
       3 - next state 4, if this frame time expired
       4 - if animationDuration expired; next state = 0. Otherwise, frameIndex++; next state: 2
    */

  public:

    Animator() {
      isPlaying = false;
      state = 0;
      screenClearNeeded = true;
    }

    // Initialization is in start() rather than constructor so that the same object
    // can be restarted at different speeds and for different amounts of time
    void start( int _frameDuration, int _animationDuration) {
      frameDuration = _frameDuration;
      animationDuration = _animationDuration;
      frameIndex = 0;
      isPlaying = true;
      state = 1;
    }

    void update() {
      // for debugging
      Serial.print(F("state = "));
      Serial.print(state);
      Serial.print(F("\t time = "));
      Serial.print(millis());
      Serial.print(F("\t frame index = "));
      Serial.print(frameIndex);
      Serial.println();
      switch (state) {
        case 0: // Just created; clear screen; next state: 0. .start() causes state 1
          if (screenClearNeeded) {
            display.clearDisplay();
            display.display();
            screenClearNeeded = false;
          }
          state = 0;
          break;
        case 1: // frameIndex = 0, startedAnimationAt = millis(); next state: 2
          frameIndex = 0;
          startedAnimationAt = millis();
          state = 2;
          break;
        case 2: // display this frame; next state: 3
          display.clearDisplay();
          display.drawBitmap(0, 0, positions[frameIndex], 128, 18, SSD1306_WHITE);
          display.display();
          startedThisFrameAt = millis();
          state = 3;
          break;
        case 3: // next state 4, if this frame time expired
          if ((millis() - startedThisFrameAt) >= frameDuration) {
            state = 4;
          }
          break;
        case 4: // if animationDuration expired; next state = 0. Otherwise, frameIndex++; next state: 2
          if ((millis() - startedAnimationAt) >= animationDuration ) {
            screenClearNeeded = true;
            isPlaying = false;
            state = 0;
          } else {
            frameIndex = (frameIndex + 1) % 5;
            state = 2;
          }
          break;
        default:
          Serial.println("Invalid state; freezing");
          while (1)
            ;
          break;
      }
    }
};

Animator myAnimator;

void setup()
{
  Serial.begin(9600);
  initOLED();
  initButton();
  initMotorDriver();
}

void loop()
{
  //If the button is pressed start the animation
  if (button.isPressed()) {
    myAnimator.start(100, 5000);
    myWiggler.init(4, 500, 10, 100); // repetitions, duration,  innerSpeed, outerSpeed
  }
  myAnimator.update();
  myWiggler.update();
}

/*
    Initialization functions, copied almost directly much from the examples
*/

void initMotorDriver() {
  //***** Configure the Motor Driver's Settings *****//
  //  .commInter face is I2C_MODE
  myMotorDriver.settings.commInterface = I2C_MODE;

  //  set address if I2C configuration selected with the config jumpers
  myMotorDriver.settings.I2CAddress = 0x5D; //config pattern is "1000" (default) on board for address 0x5D

  //  set chip select if SPI selected with the config jumpers
  myMotorDriver.settings.chipSelectPin = 10;

  //*****initialize the driver get wait for idle*****//
  while ( myMotorDriver.begin() != 0xA9 ) //Wait until a valid ID word is returned
  {
    Serial.println( "ID mismatch, trying again" );
    delay(500);
  }
  Serial.println( "ID matches 0xA9" );

  //  Check to make sure the driver is done looking for slaves before beginning
  Serial.print("Waiting for motor driver peripheral enumeration...");
  while ( myMotorDriver.ready() == false )
    ;
  Serial.println("motor driver peripheral enumeration done.");

  while ( myMotorDriver.busy() ) {
    Serial.println("waiting for motor driver to not be busy");
  }
  Serial.println("motor driver ready");
  Serial.println();
  myMotorDriver.enable(); //Enables the output driver hardware
  stopMotors();
}

void initButton() {

  Wire.begin(); //Join I2C bus
  //I would assume motor driver and mp3 trigger also do this; apparently there is no harm in multiple calls

  //check if button will acknowledge over I2C
  if (button.begin() == false) {
    Serial.println("Device did not acknowledge! Freezing.");
    while (1);
  }
  Serial.println("Button acknowledged.");
  Serial.println("Button ready");
  Serial.println();
}

void   initOLED() {
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3D)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  display.display();
  Serial.println("OLED display ready");
  Serial.println();
}
